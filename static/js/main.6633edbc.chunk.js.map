{"version":3,"sources":["assets/reports/design.pdf","assets/reports/proposal.pdf","assets/img/profile_pics/javid.jpeg","assets/img/profile_pics/anar.jpeg","assets/img/profile_pics/leylah.jpeg","assets/img/profile_pics/leylai.jpeg","pages/reports/index.js","pages/header/index.tsx","pages/about/styles.ts","pages/about/index.tsx","pages/team/styles.ts","shared/colors/index.ts","pages/team/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Reports","id","className","href","proposal","design","Header","props","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","styles","infoTextContainer","flexDirection","display","flexWrap","flex","marginRight","marginLeft","infoText","fontSize","textAlign","About","style","profileContainer","width","height","backgroundColor","margin","padding","imageContainer","container","justifyContent","Team","Container","src","require","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,uDCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,0JCe5BC,MAXf,WACC,OACC,yBAAKC,GAAG,UAAUC,UAAU,aAC3B,uCACA,uBAAGC,KAAMC,KAAT,mBACA,6BACA,uBAAGD,KAAME,KAAT,mB,gBCmBYC,MArBf,SAAgBC,GACZ,OACI,kBAACC,EAAA,EAAD,CAAQN,UAAU,0BAA0BO,GAAG,QAAQC,OAAO,MAC1D,kBAACF,EAAA,EAAOG,MAAR,CAAcR,KAAK,MACf,0CAIJ,6BACI,kBAACK,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBb,GAAG,oBAChB,kBAACc,EAAA,EAAD,CAAKb,UAAU,WACX,kBAACa,EAAA,EAAIC,KAAL,CAAUb,KAAK,UAAf,SACA,kBAACY,EAAA,EAAIC,KAAL,CAAUb,KAAK,YAAf,gBCJTc,EADA,CAAEC,kBAfwB,CACrCC,cAAe,MACfC,QAAS,OACTC,SAAU,OACVC,KAAM,EACNC,YAAa,GACbC,WAAY,IASoBC,SANJ,CAC5BC,SAAU,GACVC,UAAW,YCgBAC,MAxBf,WAEI,OACI,yBAAK3B,GAAG,QAAQC,UAAU,aACtB,yBAAKA,UAAU,WAAW2B,MAAOZ,EAAOC,mBACpC,qCACA,uBAAGW,MAAOZ,EAAOQ,UAAjB,ysBCeDR,EADA,CAAEa,iBAfuB,CACpCC,MAAO,IACPC,OAAQ,IACRC,gBCDe,UDEfC,OAAQ,GACRC,QAAS,IAUsBC,eAPG,CAClCL,MAAO,GACPC,OAAQ,GACRE,OAAQ,IAIuCG,UAtBlB,CAC7BlB,cAAe,MACfC,QAAS,OACTC,SAAU,OACVC,KAAM,EACNgB,eAAgB,W,QEwBLC,MAzBf,WAEI,OACI,kBAACC,EAAA,EAAD,CAAWtC,UAAU,uBAEjB,yBAAK2B,MAAOZ,EAAOa,kBACf,yBAAKW,IAAKC,EAAQ,IAA6Cb,MAAOZ,EAAOmB,iBADjF,mBAIA,yBAAKP,MAAOZ,EAAOa,kBACf,yBAAKW,IAAKC,EAAQ,IAA4Cb,MAAOZ,EAAOmB,iBADhF,iBAIA,yBAAKP,MAAOZ,EAAOa,kBACf,yBAAKW,IAAKC,EAAQ,IAA8Cb,MAAOZ,EAAOmB,iBADlF,kBAIA,yBAAKP,MAAOZ,EAAOa,kBACf,yBAAKW,IAAKC,EAAQ,IAA8Cb,MAAOZ,EAAOmB,iBADlF,sBCDGO,MAbf,WACC,OACC,kBAAC,IAAD,KACC,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCJgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6633edbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/design.6526715b.pdf\";","module.exports = __webpack_public_path__ + \"static/media/proposal.e31a3f9c.pdf\";","module.exports = __webpack_public_path__ + \"static/media/javid.858bb308.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/anar.4117ab05.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/leylah.d6ef3311.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/leylai.0da26d82.jpeg\";","import React from \"react\";\r\nimport design from \"../../assets/reports/design.pdf\";\r\nimport proposal from \"../../assets/reports/proposal.pdf\";\r\n\r\nfunction Reports() {\r\n\treturn (\r\n\t\t<div id=\"reports\" className=\"container\">\r\n\t\t\t<h1>Reports</h1>\r\n\t\t\t<a href={proposal}>Proposal Report</a>\r\n\t\t\t<br />\r\n\t\t\t<a href={design}>Design Report</a>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Reports;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\ninterface HeaderProps {\r\n\r\n}\r\n\r\nfunction Header(props: HeaderProps): JSX.Element {\r\n    return (\r\n        <Navbar className='justify-content-between' bg=\"light\" expand='md'>\r\n            <Navbar.Brand href=\"./\">\r\n                <h1>\r\n                    Watchflix\r\n                </h1>\r\n            </Navbar.Brand>\r\n            <div>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#about\">About</Nav.Link>\r\n                        <Nav.Link href=\"#reports\">Reports</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </div>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","import { CSSProperties } from 'react';\r\nconst infoTextContainer: CSSProperties = {\r\n    flexDirection: 'row',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    marginRight: 20,\r\n    marginLeft: 20,\r\n}\r\n\r\nconst infoText: CSSProperties = {\r\n    fontSize: 24,\r\n    textAlign: 'justify'\r\n}\r\n\r\n// some inline styling props\r\nconst styles = { infoTextContainer, infoText }\r\nexport default styles","import React from 'react';\r\n\r\nimport styles from './styles';\r\n\r\nfunction About(): JSX.Element {\r\n\r\n    return (\r\n        <div id=\"about\" className=\"container\">\r\n            <div className=\"infoText\" style={styles.infoTextContainer}>\r\n                <h1>About</h1>\r\n                <p style={styles.infoText}>\r\n                    Watchflix is\r\n                    going to provide a variety of functionalities for the users. The main aim of this application is to\r\n                    provide users with the latest high-quality movies and series. The user will be able to enjoy\r\n                    his/her favorite movies and series smoothly. The application will have features like listing and\r\n                    searching movies and series based on their genre or name. It will also be available for the users\r\n                    to specify their preferences based on the genre. Then, this application will prepare suggestions\r\n                    based on the preferences of the user for the better user experience. Besides, like, dislike and\r\n                    3\r\n                    comment functionalities will be provided so that the users can give feedback to films and series\r\n                    they watched.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default About;","import { CSSProperties } from 'react';\r\nimport colors from '../../shared/colors';\r\nconst container: CSSProperties = {\r\n    flexDirection: 'row',\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    justifyContent: 'center'\r\n}\r\nconst profileContainer: CSSProperties = {\r\n    width: 300,\r\n    height: 250,\r\n    backgroundColor: colors.greys.porcelain,\r\n    margin: 10,\r\n    padding: 10,\r\n}\r\n\r\nconst imageContainer: CSSProperties = {\r\n    width: 75,\r\n    height: 75,\r\n    margin: 10\r\n}\r\n\r\n// some inline styling props\r\nconst styles = { profileContainer, imageContainer, container }\r\nexport default styles","export default {\r\n    greens: {\r\n        pastelGreen: '#5CDB59',\r\n        magicMint: '#84EEAF',\r\n        lochinvar: '#379683',\r\n        loafer: '#EDF5E1'\r\n    },\r\n    blues: {\r\n        catalinaBlue: '#05396B'\r\n    },\r\n    greys: {\r\n        porcelain: '#F1F3F4'\r\n    }\r\n}","import React from 'react';\r\nimport styles from './styles';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction Team(): JSX.Element {\r\n\r\n    return (\r\n        <Container className='d-flex flex-sm-wrap'>\r\n            {/* <Row className='d-flex flex-wrap'> */}\r\n            <div style={styles.profileContainer}>\r\n                <img src={require('../../assets/img/profile_pics/javid.jpeg')} style={styles.imageContainer} />\r\n                Javid Haji-zada\r\n             </div>\r\n            <div style={styles.profileContainer}>\r\n                <img src={require('../../assets/img/profile_pics/anar.jpeg')} style={styles.imageContainer} />\r\n                Anar Huseynov\r\n            </div>\r\n            <div style={styles.profileContainer}>\r\n                <img src={require('../../assets/img/profile_pics/leylah.jpeg')} style={styles.imageContainer} />\r\n                Leyla Hashimli\r\n            </div>\r\n            <div style={styles.profileContainer}>\r\n                <img src={require('../../assets/img/profile_pics/leylai.jpeg')} style={styles.imageContainer} />\r\n                Leyla Ismayilova\r\n            </div>\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Team;","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Reports from \"./pages/reports/index\";\r\nimport Header from \"./pages/header\";\r\nimport About from \"./pages/about\";\r\nimport Team from \"./pages/team\";\r\nimport Design from \"./pages/reports/design\";\r\nimport Proposal from \"./pages/reports/proposal\";\r\n\r\nfunction App(): JSX.Element {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<Header />\r\n\t\t\t<Route path=''>\r\n\t\t\t\t<About />\r\n\t\t\t\t<Team />\r\n\t\t\t\t<Reports />\r\n\t\t\t</Route>\r\n\t\t</Router>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from \"./App.tsx\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}